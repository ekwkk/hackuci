{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import React,{useEffect,useState}from'react';import FlatList from\"react-native-web/dist/exports/FlatList\";import Keyboard from\"react-native-web/dist/exports/Keyboard\";import Text from\"react-native-web/dist/exports/Text\";import TextInput from\"react-native-web/dist/exports/TextInput\";import TouchableOpacity from\"react-native-web/dist/exports/TouchableOpacity\";import View from\"react-native-web/dist/exports/View\";import styles from\"./styles\";import{firebase}from\"../../firebase/config\";export default function HomeScreen(props){var _useState=useState(''),_useState2=_slicedToArray(_useState,2),entityText=_useState2[0],setEntityText=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),entities=_useState4[0],setEntities=_useState4[1];var entityRef=firebase.firestore().collection('entities');var userID=props.extraData.id;useEffect(function(){entityRef.where(\"authorID\",\"==\",userID).orderBy('createdAt','desc').onSnapshot(function(querySnapshot){var newEntities=[];querySnapshot.forEach(function(doc){var entity=doc.data();entity.id=doc.id;newEntities.push(entity);});setEntities(newEntities);},function(error){console.log(error);});},[]);var onAddButtonPress=function onAddButtonPress(){if(entityText&&entityText.length>0){var timestamp=firebase.firestore.FieldValue.serverTimestamp();var data={text:entityText,authorID:userID,createdAt:timestamp};entityRef.add(data).then(function(_doc){setEntityText('');Keyboard.dismiss();}).catch(function(error){alert(error);});}};var renderEntity=function renderEntity(_ref){var item=_ref.item,index=_ref.index;return React.createElement(View,{style:styles.entityContainer},React.createElement(Text,{style:styles.entityText},index,\". \",item.text));};return React.createElement(View,{style:styles.container},React.createElement(View,{style:styles.formContainer},React.createElement(TextInput,{style:styles.input,placeholder:\"Add new entity\",placeholderTextColor:\"#aaaaaa\",onChangeText:function onChangeText(text){return setEntityText(text);},value:entityText,underlineColorAndroid:\"transparent\",autoCapitalize:\"none\"}),React.createElement(TouchableOpacity,{style:styles.button,onPress:onAddButtonPress},React.createElement(Text,{style:styles.buttonText},\"Add\"))),entities&&React.createElement(View,{style:styles.listContainer},React.createElement(FlatList,{data:entities,renderItem:renderEntity,keyExtractor:function keyExtractor(item){return item.id;},removeClippedSubviews:true})));}","map":{"version":3,"sources":["/Users/ericakong/Desktop/hackuci/src/screens/HomeScreen/HomeScreen.js"],"names":["React","useEffect","useState","styles","firebase","HomeScreen","props","entityText","setEntityText","entities","setEntities","entityRef","firestore","collection","userID","extraData","id","where","orderBy","onSnapshot","querySnapshot","newEntities","forEach","doc","entity","data","push","error","console","log","onAddButtonPress","length","timestamp","FieldValue","serverTimestamp","text","authorID","createdAt","add","then","_doc","Keyboard","dismiss","catch","alert","renderEntity","item","index","entityContainer","container","formContainer","input","button","buttonText","listContainer"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { FlatList, Keyboard, Text, TextInput, TouchableOpacity, View } from 'react-native'\nimport styles from './styles';\nimport { firebase } from '../../firebase/config'\n\nexport default function HomeScreen(props) {\n\n    const [entityText, setEntityText] = useState('')\n    const [entities, setEntities] = useState([])\n\n    const entityRef = firebase.firestore().collection('entities')\n    const userID = props.extraData.id\n\n    useEffect(() => {\n        entityRef\n            .where(\"authorID\", \"==\", userID)\n            .orderBy('createdAt', 'desc')\n            .onSnapshot(\n                querySnapshot => {\n                    const newEntities = []\n                    querySnapshot.forEach(doc => {\n                        const entity = doc.data()\n                        entity.id = doc.id\n                        newEntities.push(entity)\n                    });\n                    setEntities(newEntities)\n                },\n                error => {\n                    console.log(error)\n                }\n            )\n    }, [])\n\n    const onAddButtonPress = () => {\n        if (entityText && entityText.length > 0) {\n            const timestamp = firebase.firestore.FieldValue.serverTimestamp();\n            const data = {\n                text: entityText,\n                authorID: userID,\n                createdAt: timestamp,\n            };\n            entityRef\n                .add(data)\n                .then(_doc => {\n                    setEntityText('')\n                    Keyboard.dismiss()\n                })\n                .catch((error) => {\n                    alert(error)\n                });\n        }\n    }\n\n    const renderEntity = ({item, index}) => {\n        return (\n            <View style={styles.entityContainer}>\n                <Text style={styles.entityText}>\n                    {index}. {item.text}\n                </Text>\n            </View>\n        )\n    }\n\n    return (\n        <View style={styles.container}>\n            <View style={styles.formContainer}>\n                <TextInput\n                    style={styles.input}\n                    placeholder='Add new entity'\n                    placeholderTextColor=\"#aaaaaa\"\n                    onChangeText={(text) => setEntityText(text)}\n                    value={entityText}\n                    underlineColorAndroid=\"transparent\"\n                    autoCapitalize=\"none\"\n                />\n                <TouchableOpacity style={styles.button} onPress={onAddButtonPress}>\n                    <Text style={styles.buttonText}>Add</Text>\n                </TouchableOpacity>\n            </View>\n            { entities && (\n                <View style={styles.listContainer}>\n                    <FlatList\n                        data={entities}\n                        renderItem={renderEntity}\n                        keyExtractor={(item) => item.id}\n                        removeClippedSubviews={true}\n                    />\n                </View>\n            )}\n        </View>\n    )\n}"]},"metadata":{},"sourceType":"module"}